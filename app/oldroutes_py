#!/usr/bin/env python3

from flask import Blueprint, render_template, request, jsonify, send_file
from sqlalchemy import select, delete
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from app.models import CatalogEntity, db
from app.schema import validate_entity, CATALOG_FIELDS
from app.errors import ValidationError
import yaml
import io
from typing import List, Tuple, Dict, Any
from datetime import datetime, timezone

bp = Blueprint("main", __name__)


@bp.route("/")
def index():
    return render_template("index.html", fields=CATALOG_FIELDS)


def create_entity() -> Tuple[Dict[str, Any], int]:
    """Create a new catalog entity with enhanced error handling"""
    try:
        data = request.json
        if "yaml" in data:
            try:
                entity_data = yaml.safe_load(data["yaml"])
            except yaml.YAMLError as e:
                return (
                    jsonify(
                        {
                            "status": "error",
                            "type": "yaml_parse_error",
                            "message": "Invalid YAML format",
                            "details": str(e),
                        }
                    ),
                    400,
                )
        else:
            entity_data = data

        # Validate entity structure
        validation_errors = validate_entity(entity_data)
        if validation_errors:
            return (
                jsonify(
                    {
                        "status": "error",
                        "type": "validation_error",
                        "message": "Entity validation failed",
                        "errors": validation_errors,
                    }
                ),
                400,
            )

        metadata = entity_data["metadata"]

        # Create entity
        try:
            entity = CatalogEntity(
                kind=entity_data["kind"],
                name=metadata["name"],
                namespace=metadata["namespace"],
                title=metadata.get("title"),
                description=metadata["description"],
                owner=metadata["owner"],
                system=entity_data["spec"]["system"],
                lifecycle=entity_data["spec"]["lifecycle"],
                entity_data=yaml.dump(entity_data),
            )
        except (KeyError, TypeError) as e:
            return (
                jsonify(
                    {
                        "status": "error",
                        "type": "data_structure_error",
                        "message": "Invalid entity structure",
                        "details": str(e),
                    }
                ),
                400,
            )

        # Save to database
        try:
            db.session.add(entity)
            db.session.commit()

            return (
                jsonify(
                    {
                        "status": "success",
                        "message": "Entity created successfully",
                        "entity": entity.to_dict(),
                    }
                ),
                201,
            )

        except IntegrityError as e:
            db.session.rollback()
            return (
                jsonify(
                    {
                        "status": "error",
                        "type": "database_integrity_error",
                        "message": "Database constraint violation",
                        "details": str(e),
                    }
                ),
                409,
            )

        except SQLAlchemyError as e:
            db.session.rollback()
            return (
                jsonify(
                    {
                        "status": "error",
                        "type": "database_error",
                        "message": "Database error occurred",
                        "details": str(e),
                    }
                ),
                500,
            )

    except Exception as e:
        if db.session.is_active:
            db.session.rollback()
        return (
            jsonify(
                {
                    "status": "error",
                    "type": "unexpected_error",
                    "message": "An unexpected error occurred",
                    "details": str(e),
                }
            ),
            500,
        )


@bp.route("/api/entity", methods=["POST"])
def create_entity() -> Tuple[Dict[str, Any], int]:
    """Create a new catalog entity"""
    try:
        data = request.json
        if "yaml" in data:
            entity_data = yaml.safe_load(data["yaml"])
        else:
            entity_data = data

        errors = validate_entity(entity_data)
        if errors:
            return jsonify({"errors": errors}), 400

        metadata = entity_data["metadata"]
        entity = CatalogEntity(
            kind=entity_data["kind"],
            name=metadata["name"],
            namespace=metadata["namespace"],
            title=metadata.get("title"),
            description=metadata["description"],
            owner=metadata["owner"],
            system=entity_data["spec"]["system"],
            lifecycle=entity_data["spec"]["lifecycle"],
            entity_data=yaml.dump(entity_data),
        )

        db.session.add(entity)
        db.session.commit()

        return (
            jsonify(
                {"message": "Entity created successfully", "entity": entity.to_dict()}
            ),
            201,
        )

    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 400


@bp.route("/api/entity/<int:entity_id>", methods=["GET"])
def get_entity(entity_id: int) -> Tuple[Dict[str, Any], int]:
    """Get a specific catalog entity"""
    try:
        stmt = select(CatalogEntity).where(CatalogEntity.id == entity_id)
        result = db.session.execute(stmt)
        entity = result.scalar_one_or_none()

        if not entity:
            return jsonify({"error": "Entity not found"}), 404

        return jsonify(entity.to_dict()), 200

    except SQLAlchemyError as e:
        return jsonify({"error": str(e)}), 500


@bp.route("/api/entity/<int:entity_id>", methods=["PUT"])
def update_entity(entity_id: int) -> Tuple[Dict[str, Any], int]:
    """Update an existing catalog entity"""
    try:
        stmt = select(CatalogEntity).where(CatalogEntity.id == entity_id)
        result = db.session.execute(stmt)
        entity = result.scalar_one_or_none()

        if not entity:
            return jsonify({"error": "Entity not found"}), 404

        data = request.json
        if "yaml" in data:
            entity_data = yaml.safe_load(data["yaml"])
        else:
            entity_data = data

        errors = validate_entity(entity_data)
        if errors:
            return jsonify({"errors": errors}), 400

        metadata = entity_data["metadata"]

        # Update entity attributes
        for key, value in {
            "kind": entity_data["kind"],
            "name": metadata["name"],
            "namespace": metadata["namespace"],
            "title": metadata.get("title"),
            "description": metadata["description"],
            "owner": metadata["owner"],
            "system": entity_data["spec"]["system"],
            "lifecycle": entity_data["spec"]["lifecycle"],
            "entity_data": yaml.dump(entity_data),
        }.items():
            setattr(entity, key, value)

        db.session.commit()

        return (
            jsonify(
                {"message": "Entity updated successfully", "entity": entity.to_dict()}
            ),
            200,
        )

    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 400


@bp.route("/api/entity/<int:entity_id>", methods=["DELETE"])
def delete_entity(entity_id: int) -> Tuple[Dict[str, str], int]:
    """Delete a catalog entity"""
    try:
        stmt = delete(CatalogEntity).where(CatalogEntity.id == entity_id)
        result = db.session.execute(stmt)

        if result.rowcount == 0:
            return jsonify({"error": "Entity not found"}), 404

        db.session.commit()
        return jsonify({"message": "Entity deleted successfully"}), 200

    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500


@bp.route("/api/entity/<int:entity_id>/download")
def download_entity(entity_id: int):
    """Download entity as YAML file"""
    try:
        stmt = select(CatalogEntity).where(CatalogEntity.id == entity_id)
        result = db.session.execute(stmt)
        entity = result.scalar_one_or_none()

        if not entity:
            return jsonify({"error": "Entity not found"}), 404

        return send_file(
            io.BytesIO(entity.entity_data.encode()),
            mimetype="application/x-yaml",
            as_attachment=True,
            download_name=f"{entity.unique_name}.yaml",
        )

    except SQLAlchemyError as e:
        return jsonify({"error": str(e)}), 500


@bp.route("/api/upload", methods=["POST"])
def upload_entity() -> Tuple[Dict[str, Any], int]:
    """Upload and validate a YAML entity file"""
    try:
        if "file" not in request.files:
            return jsonify({"error": "No file uploaded"}), 400

        file = request.files["file"]
        if file.filename == "":
            return jsonify({"error": "No file selected"}), 400

        if not file.filename.endswith((".yaml", ".yml")):
            return (
                jsonify({"error": "Invalid file type. Please upload a YAML file"}),
                400,
            )

        content = file.read().decode("utf-8")
        entity_data = yaml.safe_load(content)

        errors = validate_entity(entity_data)
        if errors:
            return jsonify({"errors": errors}), 400

        return jsonify({"data": entity_data}), 200

    except yaml.YAMLError as e:
        return jsonify({"error": "Invalid YAML format"}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 400
